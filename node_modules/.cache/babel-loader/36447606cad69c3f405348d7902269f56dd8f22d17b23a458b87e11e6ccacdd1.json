{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  class: \"lyrics-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.lyrics, (line, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([{\n        'highlighted': index === $data.currentIndex\n      }, \"lyric-line\"])\n    }, _toDisplayString(line), 3 /* TEXT, CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","lyrics","line","index","key","_normalizeClass","currentIndex"],"sources":["/Users/azimi.arsyad/Documents/Wisuda/Lirik/lyrics-highlight-app/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"lyrics-container\">\n      <div\n        v-for=\"(line, index) in lyrics\"\n        :key=\"index\"\n        :class=\"{'highlighted': index === currentIndex}\"\n        class=\"lyric-line\"\n      >\n        {{ line }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      lyrics: [],\n      currentIndex: 0,\n      songs: [\"song_1.json\", \"song_2.json\", \"song_3.json\"],\n      currentSongIndex: 0\n    };\n  },\n  created() {\n    this.loadLyrics(this.songs[this.currentSongIndex]);\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n  },\n  methods: {\n    async loadLyrics(song) {\n      const response = await fetch(`./assets/${song}`);\n      const data = await response.json();\n      this.lyrics = data.lyrics;\n    },\n    handleKeyDown(event) {\n      if (event.code === \"Space\") {\n        this.currentIndex = (this.currentIndex + 1) % this.lyrics.length;\n      } else if (event.code === \"ArrowRight\") {\n        this.currentSongIndex = (this.currentSongIndex + 1) % this.songs.length;\n        this.loadLyrics(this.songs[this.currentSongIndex]);\n        this.currentIndex = 0;\n      } else if (event.code === \"ArrowLeft\") {\n        this.currentSongIndex =\n          (this.currentSongIndex - 1 + this.songs.length) % this.songs.length;\n        this.loadLyrics(this.songs[this.currentSongIndex]);\n        this.currentIndex = 0;\n      }\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.lyrics-container {\n  background-color: rgba(101, 0, 0, 1);\n  padding: 20px;\n}\n\n.lyric-line {\n  color: rgba(255, 190, 176, 1);\n  margin: 5px 0;\n}\n\n.lyric-line.highlighted {\n  color: rgba(255, 255, 255, 1);\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;EACNC,KAAK,EAAC;AAAkB;;uBAD/BC,mBAAA,CAWM,OAXNC,UAWM,GAVJC,mBAAA,CASM,OATNC,UASM,I,kBARJH,mBAAA,CAOMI,SAAA,QAVZC,WAAA,CAIgCC,KAAA,CAAAC,MAAM,EAJtC,CAIgBC,IAAI,EAAEC,KAAK;yBADrBT,mBAAA,CAOM;MALHU,GAAG,EAAED,KAAK;MACVV,KAAK,EANdY,eAAA;QAAA,eAMgCF,KAAK,KAAKH,KAAA,CAAAM;MAAY,GACxC,YAAY;wBAEfJ,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}